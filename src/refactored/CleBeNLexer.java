// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: cleben.flex

package refactored;
import java.io.IOException;
import java.io.Reader;


// Definições de tokens
enum TokenType {
    ASSIGN, TO, TYPE_NUMBER, TYPE_TEXT, NULL, TYPE_LIST, RANGE, FOR, EVERY, IN, DO, ENDFOR,
    WHILE, ENDWHILE, FUNCTION, DOES, RETURN, ENDFUNCTION, IF, THEN, ELSEIF,
    ELSE, ENDIF, PRINT, INCR, DECR, EQ, NEQ, LT, GT, LE, GE, PLUS, MINUS,
    STAR, SLASH, LPAREN, RPAREN, LBRACKET, RBRACKET, COMMA, DOTDOT, ID,
    NUMBER_LITERAL, STRING_LITERAL, EOF, ERROR
}



@SuppressWarnings("fallthrough")
public class CleBeNLexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\5\u0100\1\u0200\1\u0300\1\u0100\5\u0400\1\u0500\1\u0600"+
    "\1\u0700\5\u0100\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00"+
    "\1\u0e00\3\u0100\1\u0f00\17\u0100\1\u1000\165\u0100\1\u0600\1\u0100"+
    "\1\u1100\1\u1200\1\u1300\1\u1400\54\u0100\10\u1500\37\u0100\1\u0a00"+
    "\4\u0100\1\u1600\10\u0100\1\u1700\2\u0100\1\u1800\1\u1900\1\u1400"+
    "\1\u0100\1\u0500\1\u0100\1\u1a00\1\u1700\1\u0900\3\u0100\1\u1300"+
    "\1\u1b00\114\u0100\1\u1c00\1\u1300\153\u0100\1\u1d00\11\u0100\1\u1e00"+
    "\1\u1400\6\u0100\1\u1300\u0f16\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\3\3\22\0\1\1\1\0\1\4"+
    "\5\0\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\12\15\7\0\32\16\1\17\1\20\1\21\1\0"+
    "\1\22\1\0\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\2\16\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\16\12\0\1\3\32\0\1\1\u01bf\0"+
    "\12\52\206\0\12\52\306\0\12\52\234\0\12\52\166\0"+
    "\12\52\140\0\12\52\166\0\12\52\106\0\12\52\u0116\0"+
    "\12\52\106\0\12\52\346\0\1\1\u015f\0\12\52\46\0"+
    "\12\52\u012c\0\12\52\200\0\12\52\246\0\12\52\6\0"+
    "\12\52\266\0\12\52\126\0\12\52\206\0\12\52\6\0"+
    "\12\52\246\0\13\1\35\0\2\3\5\0\1\1\57\0"+
    "\1\1\240\0\1\1\u01cf\0\12\52\46\0\12\52\306\0"+
    "\12\52\26\0\12\52\126\0\12\52\u0196\0\12\52\6\0"+
    "\u0100\53\240\0\12\52\206\0\12\52\u012c\0\12\52\200\0"+
    "\12\52\74\0\12\52\220\0\12\52\166\0\12\52\146\0"+
    "\12\52\206\0\12\52\106\0\12\52\266\0\12\52\u0164\0"+
    "\62\52\100\0\12\52\266\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[7936];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\15"+
    "\14\13\1\1\2\16\1\0\1\17\1\0\1\20\1\21"+
    "\1\22\2\0\2\13\1\23\2\13\1\24\3\13\1\25"+
    "\1\26\1\27\1\30\1\31\1\13\1\32\6\13\1\33"+
    "\1\13\1\16\1\34\1\0\6\13\1\35\3\13\1\36"+
    "\7\13\1\37\1\13\1\40\1\41\1\42\5\13\1\43"+
    "\1\44\1\45\3\13\1\46\1\47\5\13\1\50\1\13"+
    "\1\51\2\13\1\52\1\13\1\53\1\54\1\55\1\56"+
    "\3\13\1\57\1\60\4\13\1\61\1\62\2\13\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[133];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\130\0\130\0\130"+
    "\0\130\0\130\0\130\0\334\0\u0108\0\u0134\0\u0160\0\130"+
    "\0\130\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c\0\u0268\0\u0294"+
    "\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370\0\u039c\0\u03c8\0\u03f4"+
    "\0\260\0\130\0\u0420\0\130\0\130\0\u044c\0\u0478\0\u039c"+
    "\0\u04a4\0\u04d0\0\u04fc\0\u0528\0\u0554\0\u0160\0\u0580\0\u05ac"+
    "\0\u05d8\0\u0160\0\u0160\0\u0160\0\u0604\0\u0160\0\u0630\0\u0160"+
    "\0\u065c\0\u0688\0\u06b4\0\u06e0\0\u070c\0\u0738\0\u0160\0\u0764"+
    "\0\u0790\0\130\0\u07bc\0\u07e8\0\u0814\0\u0840\0\u086c\0\u0898"+
    "\0\u08c4\0\u0160\0\u08f0\0\u091c\0\u0948\0\u0160\0\u0974\0\u09a0"+
    "\0\u09cc\0\u09f8\0\u0a24\0\u0a50\0\u0a7c\0\u07bc\0\u0aa8\0\u0160"+
    "\0\u0160\0\u0ad4\0\u0b00\0\u0b2c\0\u0b58\0\u0b84\0\u0bb0\0\u0160"+
    "\0\u0160\0\u0160\0\u0bdc\0\u0c08\0\u0c34\0\u0160\0\u0160\0\u0c60"+
    "\0\u0c8c\0\u0cb8\0\u0ce4\0\u0d10\0\u0160\0\u0d3c\0\u0160\0\u0d68"+
    "\0\u0d94\0\u0160\0\u0dc0\0\u0160\0\u0160\0\u0160\0\u0160\0\u0dec"+
    "\0\u0e18\0\u0e44\0\u0160\0\u0160\0\u0e70\0\u0e9c\0\u0ec8\0\u0ef4"+
    "\0\u0160\0\u0160\0\u0f20\0\u0f4c\0\u0160";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[133];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\3\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\3\1\21"+
    "\1\3\1\22\2\17\1\23\1\24\1\25\1\26\1\17"+
    "\1\27\1\30\1\17\1\31\1\17\1\32\1\17\1\33"+
    "\1\17\1\34\2\17\1\35\2\17\1\36\1\0\7\37"+
    "\1\40\44\37\55\0\3\4\50\0\4\41\1\42\13\41"+
    "\1\43\33\41\13\0\1\44\47\0\1\45\4\0\1\46"+
    "\52\0\1\47\1\0\1\16\34\0\1\50\16\0\2\17"+
    "\3\0\30\17\17\0\2\17\3\0\21\17\1\51\6\17"+
    "\17\0\2\17\3\0\5\17\1\52\7\17\1\53\12\17"+
    "\17\0\2\17\3\0\12\17\1\54\1\17\1\55\2\17"+
    "\1\56\4\17\1\57\3\17\17\0\2\17\3\0\15\17"+
    "\1\60\5\17\1\61\4\17\17\0\2\17\3\0\5\17"+
    "\1\62\14\17\1\63\5\17\17\0\2\17\3\0\6\17"+
    "\1\64\5\17\1\65\13\17\17\0\2\17\3\0\5\17"+
    "\1\66\3\17\1\67\10\17\1\70\5\17\17\0\2\17"+
    "\3\0\5\17\1\71\15\17\1\72\4\17\17\0\2\17"+
    "\3\0\20\17\1\73\7\17\17\0\2\17\3\0\5\17"+
    "\1\74\22\17\17\0\2\17\3\0\5\17\1\75\2\17"+
    "\1\76\4\17\1\77\12\17\17\0\2\17\3\0\10\17"+
    "\1\100\17\17\15\0\1\47\1\0\1\50\34\0\1\50"+
    "\1\0\7\37\1\0\44\37\14\101\1\102\37\101\2\41"+
    "\2\0\47\41\1\0\2\46\1\0\51\46\13\0\1\103"+
    "\55\0\2\17\3\0\21\17\1\104\6\17\17\0\2\17"+
    "\3\0\3\17\1\105\24\17\17\0\2\17\3\0\5\17"+
    "\1\106\22\17\17\0\2\17\3\0\21\17\1\107\6\17"+
    "\17\0\2\17\3\0\4\17\1\110\23\17\17\0\2\17"+
    "\3\0\5\17\1\111\22\17\17\0\2\17\3\0\20\17"+
    "\1\112\7\17\17\0\2\17\3\0\14\17\1\113\13\17"+
    "\17\0\2\17\3\0\3\17\1\114\24\17\17\0\2\17"+
    "\3\0\21\17\1\115\6\17\17\0\2\17\3\0\17\17"+
    "\1\116\10\17\17\0\2\17\3\0\12\17\1\117\1\120"+
    "\14\17\17\0\2\17\3\0\11\17\1\121\16\17\17\0"+
    "\2\17\3\0\22\17\1\122\5\17\17\0\2\17\3\0"+
    "\26\17\1\123\1\17\17\0\2\17\3\0\5\17\1\124"+
    "\22\17\17\0\2\17\3\0\11\17\1\125\16\17\2\0"+
    "\14\101\1\0\37\101\15\0\1\126\34\0\1\126\16\0"+
    "\2\17\3\0\11\17\1\127\16\17\17\0\2\17\3\0"+
    "\20\17\1\130\7\17\17\0\2\17\3\0\21\17\1\131"+
    "\6\17\17\0\2\17\3\0\5\17\1\132\22\17\17\0"+
    "\2\17\3\0\6\17\1\133\2\17\1\134\13\17\1\135"+
    "\2\17\17\0\2\17\3\0\20\17\1\136\7\17\17\0"+
    "\2\17\3\0\3\17\1\137\24\17\17\0\2\17\3\0"+
    "\20\17\1\140\7\17\17\0\2\17\3\0\22\17\1\141"+
    "\5\17\17\0\2\17\3\0\12\17\1\142\15\17\17\0"+
    "\2\17\3\0\2\17\1\143\25\17\17\0\2\17\3\0"+
    "\14\17\1\144\13\17\17\0\2\17\3\0\23\17\1\145"+
    "\4\17\17\0\2\17\3\0\22\17\1\146\5\17\17\0"+
    "\2\17\3\0\14\17\1\147\13\17\17\0\2\17\3\0"+
    "\12\17\1\150\15\17\17\0\2\17\3\0\7\17\1\151"+
    "\20\17\17\0\2\17\3\0\11\17\1\152\16\17\17\0"+
    "\2\17\3\0\15\17\1\153\5\17\1\154\4\17\17\0"+
    "\2\17\3\0\6\17\1\155\21\17\17\0\2\17\3\0"+
    "\10\17\1\156\17\17\17\0\2\17\3\0\27\17\1\157"+
    "\17\0\2\17\3\0\22\17\1\160\5\17\17\0\2\17"+
    "\3\0\5\17\1\161\22\17\17\0\2\17\3\0\22\17"+
    "\1\162\5\17\17\0\2\17\3\0\20\17\1\163\7\17"+
    "\17\0\2\17\3\0\5\17\1\164\22\17\17\0\2\17"+
    "\3\0\14\17\1\165\13\17\17\0\2\17\3\0\6\17"+
    "\1\166\21\17\17\0\2\17\3\0\20\17\1\167\7\17"+
    "\17\0\2\17\3\0\14\17\1\170\13\17\17\0\2\17"+
    "\3\0\11\17\1\171\16\17\17\0\2\17\3\0\11\17"+
    "\1\172\16\17\17\0\2\17\3\0\20\17\1\173\7\17"+
    "\17\0\2\17\3\0\14\17\1\174\13\17\17\0\2\17"+
    "\3\0\3\17\1\175\24\17\17\0\2\17\3\0\12\17"+
    "\1\176\15\17\17\0\2\17\3\0\15\17\1\177\12\17"+
    "\17\0\2\17\3\0\22\17\1\200\5\17\17\0\2\17"+
    "\3\0\5\17\1\201\22\17\17\0\2\17\3\0\14\17"+
    "\1\202\13\17\17\0\2\17\3\0\11\17\1\203\16\17"+
    "\17\0\2\17\3\0\15\17\1\204\12\17\17\0\2\17"+
    "\3\0\14\17\1\205\13\17\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[3960];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\2\1\6\11\4\1\2\11\17\1\1\0"+
    "\1\11\1\0\2\11\1\1\2\0\31\1\1\11\1\0"+
    "\102\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[133];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private TokenType symbol(TokenType type) {
        return type;
    }

    private TokenType symbol(TokenType type, Object value) {
        return type;
    }

    private void reportError(String message) {
            System.err.println("Lexer Error: " + message);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CleBeNLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public TokenType yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return symbol(TokenType.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return symbol(TokenType.ERROR);
            }
          // fall through
          case 52: break;
          case 2:
            { /* Ignora espaços em branco */
            }
          // fall through
          case 53: break;
          case 3:
            { return symbol(TokenType.LPAREN);
            }
          // fall through
          case 54: break;
          case 4:
            { return symbol(TokenType.RPAREN);
            }
          // fall through
          case 55: break;
          case 5:
            { return symbol(TokenType.STAR);
            }
          // fall through
          case 56: break;
          case 6:
            { return symbol(TokenType.PLUS);
            }
          // fall through
          case 57: break;
          case 7:
            { return symbol(TokenType.COMMA);
            }
          // fall through
          case 58: break;
          case 8:
            { return symbol(TokenType.MINUS);
            }
          // fall through
          case 59: break;
          case 9:
            { return symbol(TokenType.SLASH);
            }
          // fall through
          case 60: break;
          case 10:
            { return symbol(TokenType.NUMBER_LITERAL, Integer.parseInt(yytext()));
            }
          // fall through
          case 61: break;
          case 11:
            { return symbol(TokenType.ID, yytext());
            }
          // fall through
          case 62: break;
          case 12:
            { return symbol(TokenType.LBRACKET);
            }
          // fall through
          case 63: break;
          case 13:
            { return symbol(TokenType.RBRACKET);
            }
          // fall through
          case 64: break;
          case 14:
            { /* Ignora conteúdo de comentários */
            }
          // fall through
          case 65: break;
          case 15:
            { return symbol(TokenType.STRING_LITERAL, yytext());
            }
          // fall through
          case 66: break;
          case 16:
            { return symbol(TokenType.DOTDOT);
            }
          // fall through
          case 67: break;
          case 17:
            { yybegin(COMMENT);
            }
          // fall through
          case 68: break;
          case 18:
            { /* Ignora comentários de linha única */
            }
          // fall through
          case 69: break;
          case 19:
            { return symbol(TokenType.DO);
            }
          // fall through
          case 70: break;
          case 20:
            { return symbol(TokenType.EQ);
            }
          // fall through
          case 71: break;
          case 21:
            { return symbol(TokenType.GE);
            }
          // fall through
          case 72: break;
          case 22:
            { return symbol(TokenType.GT);
            }
          // fall through
          case 73: break;
          case 23:
            { return symbol(TokenType.IF);
            }
          // fall through
          case 74: break;
          case 24:
            { return symbol(TokenType.IN);
            }
          // fall through
          case 75: break;
          case 25:
            { return symbol(TokenType.LE);
            }
          // fall through
          case 76: break;
          case 26:
            { return symbol(TokenType.LT);
            }
          // fall through
          case 77: break;
          case 27:
            { return symbol(TokenType.TO);
            }
          // fall through
          case 78: break;
          case 28:
            { yybegin(YYINITIAL);
            }
          // fall through
          case 79: break;
          case 29:
            { return symbol(TokenType.FOR);
            }
          // fall through
          case 80: break;
          case 30:
            { return symbol(TokenType.NEQ);
            }
          // fall through
          case 81: break;
          case 31:
            { return symbol(TokenType.RANGE, yytext());
            }
          // fall through
          case 82: break;
          case 32:
            { return symbol(TokenType.DECR);
            }
          // fall through
          case 83: break;
          case 33:
            { return symbol(TokenType.DOES);
            }
          // fall through
          case 84: break;
          case 34:
            { return symbol(TokenType.ELSE);
            }
          // fall through
          case 85: break;
          case 35:
            { return symbol(TokenType.INCR);
            }
          // fall through
          case 86: break;
          case 36:
            { return symbol(TokenType.TYPE_LIST);
            }
          // fall through
          case 87: break;
          case 37:
            { return symbol(TokenType.NULL);
            }
          // fall through
          case 88: break;
          case 38:
            { return symbol(TokenType.TYPE_TEXT);
            }
          // fall through
          case 89: break;
          case 39:
            { return symbol(TokenType.THEN);
            }
          // fall through
          case 90: break;
          case 40:
            { return symbol(TokenType.ENDIF);
            }
          // fall through
          case 91: break;
          case 41:
            { return symbol(TokenType.EVERY);
            }
          // fall through
          case 92: break;
          case 42:
            { return symbol(TokenType.PRINT);
            }
          // fall through
          case 93: break;
          case 43:
            { return symbol(TokenType.WHILE);
            }
          // fall through
          case 94: break;
          case 44:
            { return symbol(TokenType.ASSIGN);
            }
          // fall through
          case 95: break;
          case 45:
            { return symbol(TokenType.ELSEIF);
            }
          // fall through
          case 96: break;
          case 46:
            { return symbol(TokenType.ENDFOR);
            }
          // fall through
          case 97: break;
          case 47:
            { return symbol(TokenType.TYPE_NUMBER);
            }
          // fall through
          case 98: break;
          case 48:
            { return symbol(TokenType.RETURN);
            }
          // fall through
          case 99: break;
          case 49:
            { return symbol(TokenType.ENDWHILE);
            }
          // fall through
          case 100: break;
          case 50:
            { return symbol(TokenType.FUNCTION);
            }
          // fall through
          case 101: break;
          case 51:
            { return symbol(TokenType.ENDFUNCTION);
            }
          // fall through
          case 102: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
